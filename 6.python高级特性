知识点：
    高阶函数、lambda函数、偏函数、切片、列表解析、字典解析、元组拆包、迭代器、生成器、装饰器

高阶函数：
    所谓高阶函数就是可以接受函数为参数的函数，如sorted、filter、map/reduce

    sorted排序函数
        sorted排序函数有一个参数key，它可以接受函数，用法举例 内置函数abs，获得数字的绝对值
        l = [1, 2, 3, -1, -2, -3, 0]
        sorted(l, key=abs) -> [0, 1, -1, 2, -2, 3, -3]

        pp = [("Leborn James", 98), ("Kevin Durant", 97), ("James Harden", 96),
        ("StephenCurry", 95), ("Anthony Davis", 95)]
        pp = sorted(pp, key=lambda p: p[0]) 经过sorted函数的处理，匿名函数lambda中 p指的是列表中的每个元组

    filter过滤函数  对序列进行过滤
        filter(a, b)
        a为函数，b为处理的数据列表；a会对b中的每个元素进行判断，结果为真保留，否则舍弃
        isinstance(1,int) 它接受两个参数，作用是判断数据的类型
    map(a, b)格式和filter一样，接受两个参数，
    reduce(a, b) reduce的a函数对b序列做积累处理
        如：
        b = [1,-2, -3, -4, -5, 8]
        def a(x,y):
            return x + y
        reduce(a, b)  对b列表的元素相加
        注意：在 python3中使用reduce需要引入模块 from functools import reduce


    匿名函数：lambda
        顾名思义，这类函数就是没有函数名，这个特点的好处是避免自定义变量名冲突，减小代码量，使代码结构更加紧凑，缺点是不可重复使用
        lambda函数通常用在需要传入一个函数作为参数，并且只在一个地方使用的情况下，匿名函数一般会作为一个参数传递，冒号前面是参数，
        可以避免变量冲突，限制是只能是一个表达式

偏函数
    高效创建特定默认参数的函数
    例子：
        from functools import partial
        def cal_power(i, m=2)
            return i**m
        cal_power4 = partial(cal_power, m=4)
    partial函数接受两个参数，第一个参数为原函数名，第二个参数为原函数中的默认参数，partial函数的返回值就是一个我们需要的新函数

切片： 用于获取一个序列（列表或元组）或者字符串的一部分，返回一个新的序列或者字符串


列表解析，也被称为列表推导

    例子：
        numbers = [1, 2, 3, 4, 5, 6, 7]
        [x**2 for i in numbers if x%2==0] 过滤到所有奇数，然后计算各个元素的平分

字典解析
     例子：
        d = {'a':1, 'b':2, 'c':3}
        {k:v*v for k, v in d.item()}
        {'a':1, 'b':4, 'c':9}

元组拆包

    python有个很强大的元组赋值特性，它允许等号左边的变量依次被元组内的元素赋值，这就是元组拆包
    例子：
        t = ('Tom', 11)
        print('I\'m {}, I\'m {} years old.'.format(*t))
        *t 的结果就是将元组的所有元素拆分出来

迭代器
    迭代：一个个读取、操作的对象称为迭代
     python中，可迭代对象就是你能用for循环迭代它的元素，比如列表是可迭代的；而迭代器是指，你能用next函数不断的去获取它的下一个值，
     直到迭代器返回StopIteration异常
     所有的可迭代对象都可以通过iter函数去获取它的迭代器，例如，letters = ['a', 'b', 'c'] it = iter(letters)
     其实所有的迭代器都实现了__iter__和__next__这两个魔法方法


生成器
    生成器首选是一个迭代器，和迭代器一样，生成器只能被遍历迭代一次，因为每次迭代的元素不是像列表元素一样，已经在内存中了；而是每迭代一次，生成一个元素
    生成器和迭代器主要区别是：
                        1.它们的创建方式不同
                        2.生成器有一些方法是迭代器不具有的
    生成器表达式
               1.(x**x for x in range(1, 4))
               2.使用yield函数编写生成器函数，函数的返回值就是生成器
               yield的使用方法和 return类似，不同的是， return可以返回有效的 python 对象，而yield返回的是一个生成器，函数碰到 return直接就返回了
               而使用yield的函数，到yield返回一个元素，当再次迭代生成器时，会从yield后面继续执行，

装饰器
    本质上是一个函数，它接受一个函数作为参数
