面向对象编程：是一种程序设计思想。
    用面向过程的思想设计程序时，程序是一条条指令的顺序执行，当指令变得多起来时，
    它们可以被分隔成我们先前实验中讲解过的函数。
    面向对象编程则是将对象视为程序的组成单元，程序的执行通过调用对象提供的接口完成
    面对对象的4个核心概念：抽象、封装、继承、多态

知识点：
  面向对象编程思想、抽象、封装、类与实例、继承与方法重写、多态
  私有属性和方法、类方法与静态方法、property装饰器、类中的特殊方法

抽象：就是对特定实例抽取共同的特征及行为形成一种抽象类型的过程，
     特征和行为在程序语言中通常被称为属性和方法

类与对象
    面向对象的两个基本概念是类和实例，类是抽象的模板，而实例是根据类创建出来的一个个具体的"对象"。
    一个类中既会定义属性，也会定义方法

类的构成：类名、类的属性、类的方法

创建类和实类对象
    类的命名规则遵循大驼峰命名法，每个单词首字母都大写，私有类使用一个下划线开头
    class 类名：
        代码块（定义类的属性和方法）
     创建对象的方式为： 对象名 = 类名()

实例方法：
    在python中只要新建一个类就会自动创建它的内置类方法或属性，可以通过dir(类名)查看；
    打印类的实例时，可以通过内置方法__repr__来格式化实例的打印格式

封装：
    在面向对象的语言中，封装就是用类将数据和基于数据的操作封装在一起，隐藏内部数据，对外提供公共的访问接口

继承与方法重写：

多态：就是使用同一方法对不同对象可以产生不同的结果

私有属性和方法
    私有属性：在python中约定在属性方法名前添加__（两个下划线）来拒绝外部的访问
    ps:Python中没有绝对的私有，即使是__两个下划线来约束，也是可以通过obj.Classname_privateAttributeOrMethod

类属性、类方法与静态方法

    类属性是类对象的属性，通过类对象定义的实例对象都可以拥有这个属性
    但是在类外，只有公有的类属性才可以被直接访问

    类方法和类属性类似，它也可以通过类名直接访问，类方法用装饰器@classmethod装饰

    静态方法用装饰器@staticmethod装饰

    总结： 类中有3中方法分别是实例方法、类方法和静态方法

property装饰器
    @property装饰器可以将一个方法变成一个属性来使用，通过property装饰器可以获得和修改对象的某一个属性
    使用方法：
            只有@property表示可读
            同时有@property和@*(装饰的函数).setter表示可读可写
            同时具有@property和@*.setter和*.deleter表示可读可写可删除
            @property必须定义在@*.setter的前面，类必须继承object父类

类中的特殊方法（魔法方法）
    它们是 python内置的方法，通常以双下划线来命名，比如__init__、__repr__
    __init__: 在实例对象创建完成后调用的，主要用于设置实例对象的初始值，它的第一个参数为self
    __new__: 在实例对象被创建之前调用的，主要用于创建实例对象并返回实例对象
             它的第一个参数为cls,它只会取cls参数，其余参数都传给了__init__方法
             必须要有返回值可以是supper().__new__(cls)或者object.__new__(cls)
    __del__:  它定义了当对象被销毁时需要执行的行为
    __slots: 限制绑定属性类别，但只在定义的类中有效
    __getattribute__ 和 __getattr__
        需要注意的是__getattribute__方法会比__getattr__方法优先调用，
        如果调用__getattribute__方法有返回值就不会调用__getattr__方法了。
    __call__:在python中一切皆对象，对象分为可调用和不可调用的，
             凡是可通过一堆括号（）都是可调用对象，比如函数、类等
             可以通过callable()函数来判断一个对象是否可调用对象
    __iter__ 和 __next__：
            __iter__方法可以让类称为一个可迭代对象，如果使用for 循环遍历类对象还需要在类中定义__next__方法，
            在__next__方法可以定义取值的规则，超出取值范围则会抛出StopIteration，从而退出当前循环
