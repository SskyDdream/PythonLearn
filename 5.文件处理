文件处理：文件处理是项目开发中使用数据持久化和获取配置的主要方法
知识点： 输入与输出、打开与关闭文件、读取文件内容、写入文件、pickle与JSON序列化、CSV文件的读写

输入与输出
    在计算机程序中常常会听到人提到一个做I/O的词，其实它是指Input/Ouput，也就是输入与输出，这里讨论的就是键盘输入和显示屏输出

    在python3中，一般中终端获取用户的输入使用的是Input()函数，括号中可以写入提示信息，用户输入的都是字符串类型，主要用于动态获取用户的输入
    而python中最常见的输出就是Print()函数，这个函数用于在显示屏中进行打印

    格式化输出：
                1.%+字母  %d整数、%s字符串、%f浮点数（%.2f四舍五入取两位）
                2.format()函数

打开与关闭
    我们使用open()函数打开文件。这个函数将返回一个文件对象，我们对文件的读写都将使用这个对象
    open()函数需要两个参数，第一个参数是文件路径或文件名，第二个是文件的打开模式。
    "r" 以只读模式打开，你只能读取文件但不能编辑/删除文件的任何内容
    "w" 以写入模式打开，如果文件存在将会删除里面的所有内容，然后打开这个文件进行写入
    "a" 以追加模式打开，写入到文件中的任何数据将自动添加到末尾
    "b" 以二进制的方式打开
    默认模式是只读模式

读取文件内容
    read() 一次性读取整个文件的内容到字符串；readline()就是用来读取文件的一行，readlines()可以读取所有行，但不同于read()，这个函数返回的是一个了列表，
    列表中的每个元素都是对应文本中一行内容的字符串;也可以用for循环遍历文件对象来读取文件的每一行

写入文件
    最常见的写入文件的方法是write()

拷贝文件
    pass

    新函数enumerate(iterableobject),在列表循环中，索引位置与对应值可以使用它同时得到

pickle与JSON序列化
    如果我们想利用文本文件保存一个Python对象怎么操作
    这里就涉及到序列化的问题，序列化是指将内存中的对象转化为可以存储的格式。
    python中最常见的两种方式进行序列化：pickle模块和JSON格式

    import pickle -> pickle.dump(数据，文件名或路径) 写入文件 -> pickle.load(file) 读取文件，恢复原来内存中的对象
    注意：写入和读取都需要使用wb二进制模式，如果只是想将对象序列化成一个字节流，那么可以使用pickle.dumps(obj)

JSON(JavaScript Object Notation,JS对象标记)
    是一种轻量级的数据交换格式
    import json -> json.dumps("字典、列表等") 转换成json格式的字符串 -> json.dump(数据，文件名或路径) 将对象进行序列化并存入文件
    json.loads(json_str) 将json字符串反序列化为字典/列表 json.load(f) 将json文件反序列化为字典/列表

CSV文件读写
    CSV即Comma Separate Values(逗号分隔值)的缩写，顾名思义，文件是由逗号进行分割的一列一列的数据，具有编辑方便、可视化效果优良的特点
    import csv -> csv.reader(f) 读取文件，读取的结果是个迭代器 -> csv.writer(f).writerows(data) writerow 写入一行 writerows 写入多行
    在Windows系统使用python代码写入csv文件会出现空行，加个参数newline='',即可解决（with open('xxxx.csv', 'w', newline='') as f:）















