简介：
    HTML，CSS，JavaScript是Web开发的基础，任何一个网页都离不开HTML，CSS。
    HTML标签组构建了网页的基本框架，而CSS则使得网页布局更加合理美观。本节实验我们将学习HTML5和CSS3

知识点：HTML5基础知识、CSS3基础知识


HTML5基础
    HTML有很多版本，其中HTML5是目前最新也是最为流行的版本。我们看到的任何一个网页，查看其源码时，能看到类似于<div></div>这样的标签
    HTML就是由这些标签组成，学习HTML5的过程就是学习各种个样标签，了解其用途和各种属性
    <!DOCTYPE HTML> 指示了页面的文档类型是HTML5文档
    <head></head>定义了文档的头部，描述了这页面的一些信息，比如标题，编码，引用了css等信息
    <body></body> 定义了文档的主体，包含文档的所有内容

    可以看到HTML5就是由各类标签组成的，这些标签大部分都有一个起始标签和一个闭合标签，比如<div>是起始标签，而</div>是闭合标签
    起始标签和闭合标签形成了一个容器，又可以包含其它各种标签。有一些标签，可以没有闭合标签，比如前面出现的<link>标签

    HTML页面上的所有标签组成了一颗数，比如所有<body>标签内的标签都称为<body>标签的子元素，<body>称为父元素

    标签经过浏览器渲染显示的时候，可以按默认显示类型分为两种，一种是在行内显示，类似于<span>标签，其它大部分标签都直接显示一行
    比如<div>, <p>标签。标签可以包含各种属性，比如<link>标签的href属性指定了加载的CSS文件路径。
    <div>标签的class属性指定了标签的类名，大部分标签都有class和id这两个属性，前者指定了标签的类名，后者指定了标签内的标识符，
    一个HTML文档内不能有相同的id属性

    一些常见的标签如下：
        <div> 最常用的标签，可以包含各种标签，页面布局最常见的标签
        <a> 定义链接
        <br> 插入换行符
        <button> 定义按钮
        <dl> 定义列表
        <dt> 定义列表项
        <fieldset> 定义表单控件组
        <form> 定义表单
        <input> 定义输入框
        <ul> 定义无序列表
        <script> 定义加载的JavaScript

     语义标签
        HTML5相对于老版本HTML非常好的一点是，可以使用语义标签，所谓语义标签是指从标签名就可以看出标签的用途。
        比如前面出现的<nav>标签，一看就知道应该实现导航栏功能。使用老版本实现页面时，大部分都是通过标签的class和id属性来指明标签的含义
        实现同样的功能使用语义标签会更加清晰简洁，一些常用的语义标签如下表：
            <header> 表示内容的头部信息，比如一个页面的头部
            <footer> 表示内容的尾部信息，可以包含作者，版权信息等内容
            <nav> 表示导航信息
            <section> 表示节，比如文档的一节内容
            <article> 表示文档内容的一个独立片段，比如博客条目或报纸上的文章
            <aside> 表示与页面其他部分略微相关的内容片段

    表单
        表单是网页中必不可少的组件，用户可以通过表单输入各种数据，然后通过提交表单，将输入的数据交给网站后台。
        在HTML中，通过<form><input>等标签实现。HTML5，可以自定义表单能够接受的数据类型


CSS
    前面一节，我们学习了HTML5标签语言，HTML实现网页以后就可以使用CSS控制网页标签的样式和布局。
    CSS全名叫层叠样式表，可以用于控制标签如何显示

    基础语法
        CSS规则由两个主要分部分构成：选择器， 以及一个或多个属性值
        selector {
            property1: value1;
            property2: value2;
            ....
            propertyn: valuen;
            }
        比如： h1   {color:red; font-size:14px;}
            h1 选择器；color 属性；red 值； color:red 声明；

        可以对选择器进行分组，这样被分组的选择器就可以分享相同的属性设置声明，用逗号将需要分组的选择器分开
        如： h1, h2, h3, h4, h5 { color: red;}

        HTML子元素将从父元素继承属性
        body {color: green;}
        通过CSS继承，子元素将继承最高级元素（在例子中是body）所拥有的属性。所有子元素都显示成绿色

    选择器
        派生选择器
            通过依据元素在上下文关系来定义样式，可以使标记更加简洁。
            派生选择器允许你根据文档的上下文关系来确定某个标签的样式。通过合理地使用派生选择器可以使HTML代码变得更加整洁
            比如，你希望列表标签<li>中所有的<strong>元素变为红色
                li strong{color: red;}

        ID选择器
            ID选择器可以选择设置相同ID值的HTML元素，ID选择器#字符开始，比如
                css:
                    #pid a{color: #00755f}
                html：
                    <p id='pid'> hello css<a href="http://www.shiyanlou.com">shiyanlou</a></p>
    }
        类选择器
            在学习HTML的时候，我们知道标签可以定义类class属性，CSS就可以基于该属性值就是类名进行选择，类选择器以.字符开始
            css :
                .container {color: red;}
            html:
                <div class='container'>
                    container 容器
                </div>

        属性选择器
            HTML可以设置各种属性，CSS可以根据这些属性进行选择标签
            css:
                [title] {color: red;}
            html:
                <p title="foo">属性和值选择器</p>

            如果想要根据属性和属性值选择，如
                css:
                    [title=foo] {color: red;}



    常用属性
        文本属性
            font	在一个声明中设置所有字体属性
            font-family	规定文本的字体系列
            font-size	规定文本的字体尺寸
            font-weight	规定字的粗细
            color	设置文本的颜色
            direction	规定文本的书写方向
            line-height	设置行高
            text-align	规定文本的水平对齐方式
            text-decoration	规定添加到文本的装饰效果
            text-indent	规定文本块首行的缩进
        背景属性
            background	在一个声明中设置所有的背景属性
            background-attachment	设置背景图像是否固定或者随着页面的其余部分滚动
            background-color	设置元素的背景颜色
            background-image	设置元素的背景图像
            background-position	设置背景图像的开始位置
            background-repeat	设置是否及如何重复背景图像
            background-clip	规定背景的绘制区域
            background-origin	规定背景图片的定位区域
            background-size	规定背景图片的尺寸

        尺寸属性
            height	设置元素高度
            max-height	设置元素的最大高度
            max-width	设置元素的最大宽度
            min-height	设置元素的最小高度
            min-width	设置元素的最小宽度
            width	设置元素宽度

        外边距属性
            margin	在一个声明中设置所有外边距属性
            margin-bottom	设置元素的下外边距
            margin-left	设置元素的左外边距
            margin-right	设置元素的右外边距
            margin-top	设置元素的上外边距

        边框属性
            border	在一个声明中设置所有的边框属性
            border-bottom	在一个声明中设置所有的下边框属性
            border-left	在一个声明中设置所有的左边框属性
            border-right	在一个声明中设置所有的右边框属性
            border-top	在一个声明中设置所有的上边框属性

        内边距属性
            padding	在一个声明中设置所有内边距属性
            padding-bottom	设置元素的下内边距
            padding-left	设置元素的左内边距
            padding-right	设置元素的右内边距
            padding-top	设置元素的上内边距

        定位属性
            bottom	设置定位元素下外边距边界与其包含块下边界之间的偏移
            clear	规定元素的哪一侧不允许其他浮动元素
            display	规定元素应该生成的框的类型
            float	规定框是否应该浮动
            left	设置定位元素左外边距边界与其包含块左边界之间的偏移
            overflow	规定当内容溢出元素框时发生的事情
            position	规定元素的定位类型
            right	设置定位元素右外边距边界与其包含块右边界之间的偏移
            top	设置定位元素的上外边距边界与其包含块上边界之间的偏移
            visibility	规定元素是否可见



    框模型
        在上一节中，我们看到可以设置一个元素的外边距，边框和内边距属性，这些属性就构成了框模型。
        一个 HTML 标签元素经过浏览器渲染显示在页面上后，最内部分是实际的内容，字节包含内容的是内边距。内边距呈现了元素的背景。
        内边距的边缘是边框，边框以外是外边距，外边距默认是透明的，因此不会遮挡任何元素
